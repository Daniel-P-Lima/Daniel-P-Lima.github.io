<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://daniel-p-lima.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://daniel-p-lima.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-09T20:45:21+00:00</updated><id>https://daniel-p-lima.github.io/feed.xml</id><title type="html">Daniel P. Lima</title><subtitle>Where technology and everyday life converge </subtitle><entry><title type="html">Understanding Dijkstra’s Algorithm</title><link href="https://daniel-p-lima.github.io/blog/2024/dijkstra/" rel="alternate" type="text/html" title="Understanding Dijkstra’s Algorithm"/><published>2024-12-09T16:11:00+00:00</published><updated>2024-12-09T16:11:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/dijkstra</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/dijkstra/"><![CDATA[<h1 id="who-is-dijkstra">Who is Dijkstra?</h1> <p>Edsger W. Dijkstra was a Dutch computer scientist and a pioneer in the field of programming. Born in 1930, he made numerous contributions to computer science, but one of his most famous works is the Dijkstra Algorithm. This algorithm is used to find the shortest path between two points in a graph, a concept that’s foundational for modern navigation apps, computer networks, and more.</p> <p>Dijkstra believed in solving problems elegantly and efficiently. His algorithm, created in 1956, remains one of the simplest yet powerful tools in computer science.</p> <h1 id="how-does-dijkstras-algorithm-work">How Does Dijkstra’s Algorithm Work?</h1> <p>Imagine you are in a big playground, and you want to walk from one spot to another without getting too tired. But there are many paths to take, and some of them are shorter or easier than others.</p> <p>Here’s how you can find the shortest path:</p> <ol> <li>Start where you are now. That’s your starting point.</li> <li>Look at all the paths you can take to the places next to you. Write down how long each path is.</li> <li>Choose the shortest path to go to the next place.</li> <li>Once you arrive there, do the same thing again: check all the paths, write down their distances, and choose the shortest one.</li> <li>Keep doing this until you get to your destination.</li> </ol> <p>In simple terms:</p> <p>Always pick the shortest route you know so far. Update the distances as you go along. In the end, you’ll have found the easiest, shortest way to get to where you want to go!</p> <h1 id="how-does-dijkstras-algorithm-work-the-real-way">How Does Dijkstra’s Algorithm Work? (The Real Way)</h1> <p>Dijkstra’s Algorithm is used to determine the shortest path between a source node and all other nodes in a weighted graph. Here’s the step-by-step explanation:</p> <p>Components of the Problem:</p> <ul> <li>Graph: A collection of nodes (vertices) connected by edges.</li> <li>Weights: Each edge has a weight (cost), which is a numerical value representing the “distance” or “cost” between two nodes.</li> <li>Source: The starting node from which the algorithm begins.</li> </ul> <h1 id="real-world-applications">Real-World Applications</h1> <p>Dijkstra’s Algorithm is widely used in:</p> <ul> <li>GPS Navigation: Finding the shortest route from your location to your destination.</li> <li>Network Routing: Optimizing data packet transmission in networks.</li> <li>Gaming: Calculating paths for characters in strategy games.</li> </ul> <p>Nesse gráfico temos dois tipos de entidades:</p> <ul> <li>Vértices: S, A, B e C</li> <li>Caminhos, onde são colocados os valores para travessia Digamos que cada vértice é uma cidade e cada linha que liga as cidades são estradas. Para ir de uma cidade para outra se gasta tempo, esse tempo está estampado na linha.</li> </ul> <p>Note que temos um caminho partido de S para A e outro partindo de S para B. Seguindo um simples lógica o caminho mais curto entre S e B seria ir direto de S para B, porém o tempo de travessia é de 3 minutos, se formos primeiro para A e depois para B gastaremos apenas 2 minutos (1 minuto de S para A e 1 minuto de A para B), sendo o caminho mais rápido e consequentemente mais curto.</p> <ul> <li>Agora qual o caminho mais curto partindo de da cidade S para cidade C? Se você respondeu: <ul> <li>Partindo de S para A, depois de A para B e finalmente de B para C, concluindo o trajeto em 6 minutos, <strong>você acertou!</strong> Isso é basicamente o algoritmo de Dijkstra, mas agora vamos ver exatamente como ele é executado…</li> </ul> </li> </ul> <h1 id="como-o-algoritmo-é-resolvido">Como o algoritmo é resolvido?</h1> <h2 id="1-primeiro-passo">1. Primeiro passo:</h2> <p>Vamos considerar 2 tipos de vértices, os explorados e os inexplorados</p> <h1 id="inserir-tabela-de-vértices">INSERIR TABELA DE VÉRTICES</h1> <ul> <li>No começo todos os vértices são inexplorados. Vamos representar os vértices na tabela do seguinte jeito: \(Vertex^{DP}\)</li> <li>D: The minimun distance from the source to that vertex. The path used must only have explored vertices</li> <li>P: The parent of that vertex</li> </ul> <ol> <li>The distance from the source S to the vertex S is 0, because they are the same so: <ul> <li>D: 0</li> <li>P: No parent \(Vertex^{0}\)</li> </ul> </li> <li>Find a path to vertex A from the source that consist only explored vertices, there are no explored vertices. If there is no path we say that the distance of the vertex is $\infty$</li> <li> <h2 id="the-same-goes-to-b-and-c">The same goes to B and C</h2> </li> <li>Now we set the vertex in the unexplored section whi the least distance to explored, beeing S, so now S is explored.</li> <li>Now that S is explored, we can go from S to A with a distance of 1, so: <ul> <li>D: 1</li> <li>P: S \(Vertex^{1S}\) —</li> </ul> </li> <li>We repeat the same steps to B <ul> <li>D: 3</li> <li>P: S \(Vertex^{3S}\) —</li> </ul> </li> <li> <h2 id="there-is-no-path-between-s-and-c-using-only-s-so-the-distance-dont-change-beeing-infty">There is no path between S and C using only S, so the distance dont change beeing $\infty$.</h2> </li> <li>Now we take the least distance vertex from the unexplored site to the explored site, beeing $Vertex^{1S}$</li> </ol> <h1 id="conclusion">Conclusion</h1> <p>Dijkstra’s Algorithm is an elegant solution for finding the shortest path in a graph. While it’s simple to understand, its real-world impact is massive, powering technologies we use every day. If you’ve ever wondered how your GPS app finds the fastest route, you now know—Edsger Dijkstra’s work is behind the magic!</p>]]></content><author><name></name></author><category term="document"/><category term="code"/><category term="math"/><category term="guide"/><summary type="html"><![CDATA[A guide to understand and resolve Dijkstra algorithm problems.]]></summary></entry><entry><title type="html">The Art of Effective Technical Documentation</title><link href="https://daniel-p-lima.github.io/blog/2024/documentation/" rel="alternate" type="text/html" title="The Art of Effective Technical Documentation"/><published>2024-12-04T15:57:00+00:00</published><updated>2024-12-04T15:57:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/documentation</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/documentation/"><![CDATA[<h1 id="introduction">Introduction</h1> <h2 id="how-documentation-works">How Documentation Works**</h2> <p>Large systems are typically developed over time by different individuals. A significant challenge new employees face when encountering a new system is their lack of knowledge about it, often relying on guidance from someone already familiar with the system. This is where technical documentation plays a vital role, simplifying the understanding of the system as a whole and eliminating the need for word-of-mouth training.</p> <p>The culture of maintaining documentation has historically been neglected. For instance, even Google faces challenges with its documentation practices, as highlighted in Riona MacNamara’s talk (see references). Software engineers often lack the time and motivation to create or update documentation, yet it is undeniably essential for streamlining many processes.</p> <p>This document will propose strategies and resources to enhance the technical documentation of projects.</p> <h2 id="what-to-document">What to Document?</h2> <p>Determining what to document is the first step toward effective documentation. Consider what questions you would ask when encountering the system for the first time and which information would be most useful. Two critical aspects to focus on are:</p> <ul> <li><strong>What questions are asked repeatedly?</strong></li> <li><strong>What information is only available through specific individuals?</strong></li> </ul> <p>If there are clear answers to these questions, they should be documented.</p> <p>Imagine you wrote a long and complex piece of code a year ago, and now you want to revisit it for improvements. However, you no longer understand half of the code and are forced to review it line by line, taking ages to comprehend it fully. If the code had been documented in a technical yet straightforward manner, the process would be far quicker and more efficient.</p> <h2 id="how-to-document">How to Document?</h2> <p>More important than simply starting to write is ensuring that documentation is done the right way. The structure and style of the documentation significantly impact its usefulness and readability. Engaging with the team—both those creating and those using the documentation—is a crucial first step in building effective materials.</p> <p>Being simple, concise, and to the point is essential. Avoid overly lengthy or complex documentation, as it makes reading more difficult. Since documentation needs to be updated regularly, it is vital to ensure it is easy to edit and straightforward to understand.</p> <h2 id="collaboration">Collaboration</h2> <p>Collaboration within the development team is a crucial step toward creating concise and effective documentation. Involving the team in key aspects of the project not only enhances the quality of the documentation but also contributes to the overall success of the project’s development.</p> <h1 id="best-practices">Best Practices</h1> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets%5Cimg%5Cgood_practices-480.webp 480w,/assets%5Cimg%5Cgood_practices-800.webp 800w,/assets%5Cimg%5Cgood_practices-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets%5Cimg%5Cgood_practices.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ol> <li> <p><strong>Define the Project Scope</strong><br/> Clearly and objectively outline the project’s scope, making the initial understanding more accessible.</p> </li> <li> <p><strong>Acknowledge the Team</strong><br/> Include contributors, reviewers, editors, and publishers in the project’s scope. Ensure everyone involved is credited along with their roles.</p> </li> <li> <p><strong>Identify Topics and Subtopics</strong><br/> Break the documentation into clearly organized topics and subtopics. This systematic structure allows users to easily navigate and find the information they need.</p> </li> <li> <p><strong>Be Specific About Expected Outcomes</strong><br/> Clearly define what the project aims to achieve so the team knows when success has been reached. Specify the expected results and a timeline for achieving them, providing a solid definition of completion.</p> </li> <li> <p><strong>Document Technical Parameters and Environmental Requirements</strong><br/> Ensure that all necessary specifications and technologies involved in executing the project are outlined for the team.</p> </li> <li> <p><strong>Define Deliverables</strong><br/> Be explicit about what will be delivered at the end of the project. Clearly state what the final outcome will be and how it will benefit the company upon completion.</p> </li> <li> <p><strong>Update Documentation Regularly</strong><br/> Use a documentation tool that maintains a version history of each document, enabling reference to previous versions when needed. Regular updates may require revisiting historical versions to track the project’s progress.</p> </li> <li> <p><strong>Set Prerequisites</strong><br/> Define the assumptions and requirements for the project’s success.</p> </li> <li> <p><strong>List Materials Used</strong><br/> Provide an upfront list of materials (e.g., operating systems, software). Just as a recipe specifies ingredients at the beginning, this helps streamline the documentation process.</p> </li> <li> <p><strong>Use Diagrams</strong><br/> Incorporate diagrams to visualize processes and workflows. These enhance accessibility, especially for individuals who learn better through visual representations.</p> </li> <li> <p><strong>Include Dates</strong><br/> Adding dates is a simple yet effective way to provide temporal context within the documentation, especially when dealing with multiple versions of the same project.</p> </li> </ol> <h1 id="methods-for-documentation">Methods for Documentation</h1> <h2 id="readme">README</h2> <p>One of the oldest and most common practices for documenting projects is the README file. Placed in the root directory of the project, it typically includes the documentation, useful links, tools used, and other relevant details. While this structure can vary depending on the project, the following is a basic prototype:</p> <ol> <li><strong>Project Objective</strong></li> <li><strong>How It Works</strong> <ul> <li>Tools used</li> <li>Programming languages</li> <li>Data structures</li> </ul> </li> <li><strong>Code Access and Execution</strong></li> <li><strong>Guidelines for Making Changes</strong></li> <li><strong>Update and Monitoring Process</strong></li> <li><strong>Useful Links</strong></li> </ol> <h1 id="structure-suggestions">Structure Suggestions</h1> <ul> <li> <p><strong>Objective</strong><br/> Provide a technical description of the project’s purpose, including links to additional technical resources.</p> </li> <li> <p><strong>How It Works</strong><br/> Explain the software architecture used, the types of requests made, and how they are processed. Mention all languages and frameworks utilized throughout the project. Visual representations of the architecture, such as diagrams, are highly recommended.</p> </li> <li> <p><strong>Code Access and Execution</strong><br/> Specify the location of the source code, how to execute it, and any dependencies or downloads required to fully run the application.</p> </li> <li> <p><strong>Use Standard Templates</strong><br/> Employing standard templates or schemas helps streamline documentation efforts, avoiding the need to reinvent the wheel.</p> </li> </ul> <h1 id="useful-tools">Useful Tools</h1> <ul> <li> <p><strong>Read the Docs</strong><br/> Similar to other documentation platforms like GitBook, Read the Docs is more advanced. It can sync with GitHub repositories by selecting specific repositories and requires a <code class="language-plaintext highlighter-rouge">.readthedocs.yaml</code> file in the repository’s root directory.</p> </li> <li> <p><strong>GitBook</strong><br/> GitBook serves as a project documentation platform that simplifies document management. It allows any invited team member to access and contribute to the documentation easily.</p> </li> </ul> <h2 id="integration-features">Integration Features</h2> <p>With integration capabilities, tools like GitBook can synchronize with various platforms already used by teams, such as Jira, GitHub, Figma, and more.</p> <h3 id="github-synchronization"><strong>GitHub Synchronization</strong></h3> <p>GitHub synchronization allows technical teams to connect GitHub repositories with GitBook, transforming Markdown files into polished, user-friendly documentation. This functionality enables you to edit directly in GitBook while keeping the content synchronized with the codebase in GitHub—and vice versa. However, it appears that only Markdown files, not code files, can be synchronized.</p> <h3 id="servicenow"><strong>ServiceNow</strong></h3> <p>ServiceNow functions similarly to Jira but offers a broader range of features. It may be a more comprehensive choice for teams looking for advanced functionalities beyond basic task management.</p> <h3 id="document360"><strong>Document360</strong></h3> <p>Document360 is a documentation tool that supports companies throughout the software development lifecycle, streamlining processes and workflows. It provides end-to-end support, from ideation to product launch, keeping the team informed about upcoming tasks, who is responsible for them, and their deadlines. This tool appears to be a highly effective option for enhancing productivity and clarity.</p> <hr/> <h1 id="conclusion">Conclusion</h1> <p>Effective technical documentation is more than a formality—it’s a critical component of successful project management. By adopting best practices, leveraging modern tools like GitBook and Document360, and fostering collaboration within teams, organizations can bridge knowledge gaps, improve workflows, and deliver exceptional results with greater efficiency.</p> <h1 id="references">References:</h1> <ul> <li><em>Documentação Técnica</em> – Isaac Felisberto de Souza, 2021</li> <li><em>How to Create Project Documentation with Examples &amp; Benefits</em> – Selvaraaju Murugesan, 2022</li> <li><em>Awesome-documentation</em> – vipulgupta2048, 2023</li> <li><em>Document Like a Scientist</em> – Karissa Peth, 2019</li> <li><em>The Knowledge: Towards a Culture of Engineering Documentation</em> – Riona MacNamara, 2016</li> </ul>]]></content><author><name></name></author><category term="document"/><category term="formatting"/><category term="documentation"/><category term="guide"/><summary type="html"><![CDATA[A guide to creating clear and efficient technical documentation for successful project management.]]></summary></entry><entry><title type="html">Understanding Binary Trees and AVL Trees</title><link href="https://daniel-p-lima.github.io/blog/2024/binary-tree/" rel="alternate" type="text/html" title="Understanding Binary Trees and AVL Trees"/><published>2024-10-15T20:00:00+00:00</published><updated>2024-10-15T20:00:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/binary-tree</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/binary-tree/"><![CDATA[<h1 id="understanding-what-a-binary-tree-is">Understanding What a Binary Tree Is</h1> <p>A binary tree is a hierarchical data structure composed of nodes, where each node can have at most two children: a left child and a right child. Each node contains a value and references to its left and right children, which can themselves be roots of their own subtrees, forming a recursive, tree-like structure.</p> <p>Binary trees are fundamental in computer science, widely used in algorithms and systems for efficient searching, inserting, and organizing information. Understanding how they work is essential for advancing in data structures and algorithms.</p> <h1 id="key-concepts">Key Concepts</h1> <ul> <li>Root: The topmost node in the tree.</li> <li>Subtree: Each child of a node can be considered the root of its own subtree.</li> <li>Leaf: A node with no children; both its left and right references are null.</li> <li> <p>Height/Depth: The length of the longest path from the root to a leaf node.</p> </li> <li>Node in Binary Tree vs. Linked List: Nodes in a binary tree can have two children, while nodes in a linked list have only one next reference. Recursion plays a crucial role in binary trees, particularly in traversal and manipulation operations.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bst-completa-480.webp 480w,/assets/img/bst-completa-800.webp 800w,/assets/img/bst-completa-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bst-completa.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="--the-first-node-is-called-the-root">- The first node is called the root</h3> <ul> <li>Each child of the root is a subtree of the main tree, having its own root and subtrees as well.</li> <li>A leaf is a node that has no children, with both its left and right children being null.</li> <li>Every tree has a height or depth, which is the longest distance from the root to a leaf node.</li> <li>Note that a node in a binary tree is entirely different from a node in a linked list.</li> </ul> <h1 id="traversal-strategies">Traversal Strategies</h1> <p>Traversing a binary tree means visiting every node in a specific order. Recursion is commonly used due to the tree’s recursive nature.</p> <h2 id="pre-order-traversal">Pre-order Traversal</h2> <ol> <li>Visit the root node.</li> <li>Traverse the left subtree recursively.</li> <li>Traverse the right subtree recursively.</li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/binary_tree_pre-480.webp 480w,/assets/img/binary_tree_pre-800.webp 800w,/assets/img/binary_tree_pre-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/binary_tree_pre.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="in-order-traversal">In-order Traversal</h2> <p>An algorithm with the following steps:</p> <ol> <li>Traverse the left subtree.</li> <li>Visit the root of the tree.</li> <li>Traverse the right subtree.</li> </ol> <p><strong>This traversal results in nodes being visited in ascending order in a binary search tree.</strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/binary_tree_in-480.webp 480w,/assets/img/binary_tree_in-800.webp 800w,/assets/img/binary_tree_in-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/binary_tree_in.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="post-order-traversal">Post-order Traversal</h3> <p>An algorithm with the following steps:</p> <ol> <li>Traverse the left subtree.</li> <li>Traverse the right subtree.</li> <li>Visit the root of the tree.</li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/binary_tree_pos-480.webp 480w,/assets/img/binary_tree_pos-800.webp 800w,/assets/img/binary_tree_pos-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/binary_tree_pos.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h1 id="building-a-binary-search-tree-bst">Building a Binary Search Tree (BST)</h1> <p>A Binary Search Tree (BST) is a binary tree where each node follows the property:</p> <ul> <li>Left Subtree: Contains values less than the node’s value.</li> <li>Right Subtree: Contains values greater than the node’s value. <h2 id="node-insertion-algorithm">Node Insertion Algorithm</h2> <ol> <li>If the tree is empty, create a new node as the root with the value N.</li> <li>If N is less than the current node’s value, insert N into the left subtree.</li> <li>If N is greater than the current node’s value, insert N into the right subtree.</li> <li>Duplicate values are typically not allowed in a BST.</li> </ol> </li> </ul> <blockquote class="block-tip"> <h5 id="note">NOTE</h5> <p>Note: Smaller values are always on the left of a node, and larger values are on the right. Correct insertion is crucial for maintaining the BST property.</p> </blockquote> <p>For example, inserting the values: \(14, 15, 4, 9, 7, 18, 3, 5, 16, 4, 20, 17, 9, 14, 5\)<br/> Following the proposed logic, the resulting tree will be:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/binary_tree_construct-480.webp 480w,/assets/img/binary_tree_construct-800.webp 800w,/assets/img/binary_tree_construct-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/binary_tree_construct.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="node-removal">Node Removal</h2> <p>In this part, there are several alternatives for removing nodes. All removed elements are replaced with <code class="language-plaintext highlighter-rouge">null</code>.</p> <h3 id="removing-an-external-node">Removing an External Node</h3> <p>This is perhaps the easiest way to remove a node.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/node_remove-480.webp 480w,/assets/img/node_remove-800.webp 800w,/assets/img/node_remove-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/node_remove.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="removing-an-internal-node">Removing an Internal Node</h3> <p>The most complex method of removing a node, as it requires reallocating the children of the removed node while adhering to the insertion logic.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/removed_node_internal-480.webp 480w,/assets/img/removed_node_internal-800.webp 800w,/assets/img/removed_node_internal-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/removed_node_internal.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>To simplify this process, two strategies can be employed:</p> <ul> <li>Replace the removed node with the largest value from its left subtree.</li> <li>Replace the removed node with the smallest value from its right subtree.</li> </ul> <p>In some cases, it is easier not to remove the node and simply update its information.</p> <h2 id="calculating-the-height-of-a-tree">Calculating the Height of a Tree</h2> <p>To calculate the height of a tree, it is necessary to determine the longest path from node \(X\) to one of its descendants. The height of a node \(X\) can only be calculated after visiting all of \(X\)’s descendants. <strong>The height of a leaf node is \(0\).</strong></p> <p>The process involves visiting all the children and then moving upwards, increasing the height value, calculating it from the bottom up.</p> <p>This is very similar to the post-order traversal algorithm.</p> <p>If a node has a <code class="language-plaintext highlighter-rouge">null</code> child (no child), a value of <code class="language-plaintext highlighter-rouge">-1</code> is assigned.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">height</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>  
    <span class="k">if</span> <span class="o">(</span><span class="n">no</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>  
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>  
    <span class="o">}</span>  
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getLeftNode</span><span class="o">());</span>  
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getRightNode</span><span class="o">());</span>  
    <span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>  
        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">left</span><span class="o">;</span>  
    <span class="o">}</span>  
    <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">right</span><span class="o">;</span>  
<span class="o">}</span>
</code></pre></div></div> <h1 id="balancing-the-tree-avl-trees">Balancing the Tree: AVL Trees</h1> <p>An AVL tree is a self-balancing BST where the difference in heights (balance factor) between the left and right subtrees is at most 1 for all nodes.</p> <h2 id="balance-factor">Balance Factor</h2> <p>For a node N:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">balanceFactor</span> <span class="o">=</span> <span class="n">height</span><span class="o">(</span><span class="no">N</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">-</span> <span class="n">height</span><span class="o">(</span><span class="no">N</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</code></pre></div></div> <ul> <li>Balance Factor of 0: Left and right subtrees are of equal height.</li> <li>Balance Factor of 1: Left subtree is one level higher than the right.</li> <li>Balance Factor of -1: Right subtree is one level higher than the left.</li> <li>Balance Factor beyond ±1: The tree is unbalanced at that node.</li> </ul> <h1 id="identifying-an-unbalanced-tree">Identifying an Unbalanced Tree</h1> <p>A tree becomes unbalanced when any node has a balance factor less than -1 or greater than 1.</p> <h1 id="rotations">Rotations</h1> <p>A technique used to balance the tree based on the node that causes the imbalance.</p> <h4 id="left-rotation">Left Rotation</h4> <p>When the tree is unbalanced to the right:</p> <ol> <li><code class="language-plaintext highlighter-rouge">Node newRoot = node.right</code></li> <li><code class="language-plaintext highlighter-rouge">Node temp = newRoot.left</code></li> <li><code class="language-plaintext highlighter-rouge">newRoot.left = node</code></li> <li><code class="language-plaintext highlighter-rouge">node.right = temp</code></li> </ol> <h4 id="right-rotation">Right Rotation</h4> <p>When the tree is unbalanced to the left:</p> <ol> <li><code class="language-plaintext highlighter-rouge">Node newRoot = node.getLeftNode()</code></li> <li><code class="language-plaintext highlighter-rouge">Node temp = newRoot.getRightNode()</code></li> <li><code class="language-plaintext highlighter-rouge">newRoot.right = node</code></li> <li><code class="language-plaintext highlighter-rouge">node.left = temp</code></li> </ol> <h3 id="special-cases">Special Cases</h3> <p>Special cases occur when the parent node and child node have opposite balance factors. This can lead to “infinite balancing” if handled improperly.</p> <h4 id="first-case">First Case</h4> <p>When the parent is negative and the child is positive:<br/> Perform a <strong>right rotation</strong> on the child, followed by a <strong>left rotation</strong> on the parent. This is known as a <strong>double left rotation</strong>.</p> <h4 id="second-case">Second Case</h4> <p>When the parent is positive and the child is negative:<br/> Perform a <strong>left rotation</strong> on the child, followed by a <strong>right rotation</strong> on the parent. This is known as a <strong>double right rotation</strong>.<br/> —</p> <h1 id="now-that-weve-covered-the-theory-lets-move-on-to-practice">Now that we’ve covered the theory, let’s move on to practice.</h1> <p>All the code in this article will be written in Java, but feel free to write it in the language of your choice.</p> <h1 id="the-node-class">The Node Class</h1> <h2 id="structure-and-purpose">Structure and Purpose</h2> <p>The Node class is the building block of the binary tree. Each node contains:</p> <ul> <li>Data: The value stored in the node (e.g., an integer).</li> <li>Left Child: A reference to the left child node.</li> <li>Right Child: A reference to the right child node.</li> <li>Height: Keep track of the node’s height in the tree.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
    <span class="nc">Node</span> <span class="n">left</span><span class="o">;</span>
    <span class="nc">Node</span> <span class="n">right</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div> <h3 id="explanation">Explanation:</h3> <p>The Node class has three fields: data, left, and right. The constructor initializes the data field and sets left and right to null, indicating that the node initially has no children. Added a height attribute to keep track of the node’s height in the tree. —</p> <h1 id="insertion-with-balancing">Insertion with Balancing</h1> <p>When inserting a node into an AVL tree, we follow these steps:</p> <p>Standard BST Insertion: Insert the node as you would in a regular binary search tree. Update Heights: Update the height of each node from the insertion point up to the root. Calculate Balance Factor: For each node, calculate the balance factor. Balance the Tree: If the balance factor is not within -1 to 1, perform rotations to rebalance the tree.</p> <h2 id="types-of-imbalances-and-rotations-needed">Types of Imbalances and Rotations Needed</h2> <p>Left-Left (LL) Case: Right Rotation Right-Right (RR) Case: Left Rotation Left-Right (LR) Case: Left Rotation on Left Child, then Right Rotation Right-Left (RL) Case: Right Rotation on Right Child, then Left Rotation</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Node</span> <span class="nf">insertNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Node</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
        <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">insertNode</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
        <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">insertNode</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="k">else</span>
        <span class="k">return</span> <span class="n">node</span><span class="o">;</span>

    <span class="n">node</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>

    <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
        <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
        <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">leftRotate</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">rightRotate</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h1 id="left-rotation-1">Left Rotation</h1> <p>A left rotation is performed when a node becomes unbalanced due to an extra node in its right subtree. It restructures the tree to reduce the height of the right subtree.</p> <h2 id="when-to-use-left-rotation">When to Use Left Rotation</h2> <p>Right-Right (RR) Case: Occurs when a node is inserted into the right subtree of the right child of an unbalanced node. How Left Rotation Works Given an unbalanced node A with right child B:</p> <p>Assign B’s left child to A’s right child. Set B as the new root of the subtree. Assign A as the left child of B.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Node</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="nc">Node</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
    <span class="nc">Node</span> <span class="no">T2</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>

    <span class="n">y</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
    <span class="n">x</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="no">T2</span><span class="o">;</span>

    <span class="n">x</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">y</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

    <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h1 id="right-rotation-1">Right Rotation</h1> <p>A right rotation is performed when a node becomes unbalanced due to an extra node in its left subtree. It restructures the tree to reduce the height of the left subtree.</p> <h2 id="when-to-use-right-rotation">When to Use Right Rotation</h2> <p>Left-Left (LL) Case: Occurs when a node is inserted into the left subtree of the left child of an unbalanced node. How Right Rotation Works Given an unbalanced node A with left child B:</p> <p>Assign B’s right child to A’s left child. Set B as the new root of the subtree. Assign A as the right child of B.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Node</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="nc">Node</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
    <span class="nc">Node</span> <span class="no">T2</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>

    <span class="n">x</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="n">y</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="no">T2</span><span class="o">;</span>

    <span class="n">y</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">x</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

    <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h1 id="deletion-with-balancing">Deletion with Balancing</h1> <p>Deletion in an AVL tree involves:</p> <p>Standard BST Deletion: Remove the node as in a standard binary search tree. Update Heights: Update the height of nodes from the deletion point up to the root. Calculate Balance Factor: For each node, calculate the balance factor. Balance the Tree: Perform necessary rotations to rebalance the tree if any node becomes unbalanced.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Node</span> <span class="nf">deleteNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
        <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">root</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
        <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">((</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">Node</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">:</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">temp</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">Node</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">minValueNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="n">root</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>
            <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">temp</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>

    <span class="n">root</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

    <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">leftRotate</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">rightRotate</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h1 id="traversal-methods">Traversal Methods</h1> <h2 id="in-order-traversal-1">In-order traversal</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">traverseInOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">traverseInOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">" "</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
            <span class="n">traverseInOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div> <h2 id="pre-order-traversal-1">Pre-order traversal</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">traversePreOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">" "</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
            <span class="n">traversePreOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="n">traversePreOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div> <h2 id="pos-order-traversal">Pos-order traversal</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">traversePostOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">traversePostOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="n">traversePostOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">" "</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div> <hr/> <h1 id="utility-methods">Utility Methods</h1> <h2 id="height-and-balance-factor">Height and Balance Factor</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">int</span> <span class="nf">height</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">height</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">int</span> <span class="nf">getBalance</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">return</span> <span class="nf">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">-</span> <span class="n">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="minimum-value-node">Minimum Value Node</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Node</span> <span class="nf">minValueNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>

    <span class="k">return</span> <span class="n">current</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h1 id="the-complete-binarytree-class">The Complete BinaryTree Class</h1> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTree</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">root</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">height</span><span class="o">(</span><span class="nc">Node</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">return</span> <span class="no">N</span><span class="o">.</span><span class="na">height</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getBalance</span><span class="o">(</span><span class="nc">Node</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">N</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">return</span> <span class="nf">height</span><span class="o">(</span><span class="no">N</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">-</span> <span class="n">height</span><span class="o">(</span><span class="no">N</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Node</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="nc">Node</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Node</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="no">T2</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>

        <span class="n">x</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="n">y</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="no">T2</span><span class="o">;</span>

        <span class="n">y</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">x</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Node</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="nc">Node</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Node</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="no">T2</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>

        <span class="n">y</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">x</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="no">T2</span><span class="o">;</span>

        <span class="n">x</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">y</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">insertNode</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Node</span> <span class="nf">insertNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">data</span><span class="o">));</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
            <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">insertNode</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
            <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">insertNode</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="n">node</span><span class="o">;</span>

        <span class="n">node</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">data</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">leftRotate</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">data</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">rightRotate</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Node</span> <span class="nf">deleteNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">root</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
            <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">root</span><span class="o">.</span><span class="na">data</span><span class="o">)</span>
            <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">((</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">Node</span> <span class="n">temp</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">temp</span> <span class="o">==</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span>
                    <span class="n">temp</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
                <span class="k">else</span>
                    <span class="n">temp</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">temp</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">root</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span>
                    <span class="n">root</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="nc">Node</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">minValueNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>

                <span class="n">root</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="na">data</span><span class="o">;</span>

                <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">deleteNode</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">temp</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">root</span><span class="o">;</span>

        <span class="n">root</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">height</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
   
        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">leftRotate</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="k">return</span> <span class="nf">rightRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">getBalance</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">rightRotate</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="k">return</span> <span class="nf">leftRotate</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Node</span> <span class="nf">minValueNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">current</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">traverseInOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">traverseInOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">" "</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
            <span class="n">traverseInOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">traversePreOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">" "</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
            <span class="n">traversePreOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="n">traversePreOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">traversePostOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">traversePostOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="n">traversePostOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">" "</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h1 id="conclusion">Conclusion</h1> <p>Understanding binary trees and their balanced versions, like AVL trees, is essential for efficient data management in computer science. By implementing insertion and deletion operations with balancing, we ensure that the tree remains efficient for all operations, maintaining O(log n) time complexity. —</p> <h1 id="references">References</h1> <ul> <li>Visual AVL Simulator: <a href="https://www.inf.ufsc.br/~aldo.vw/estruturas/simulador/AVL.html">AVL Simulator</a></li> <li> <h2 id="data-structures-and-algorithms-in-java">Data Structures and Algorithms in Java</h2> </li> </ul>]]></content><author><name></name></author><category term="algorithms"/><category term="data"/><category term="structures,"/><category term="algorithms,"/><category term="java,"/><category term="programming"/><summary type="html"><![CDATA[A Comprehensive Guide to Binary Trees and AVL Trees]]></summary></entry><entry><title type="html">Recursion</title><link href="https://daniel-p-lima.github.io/blog/2024/recursion/" rel="alternate" type="text/html" title="Recursion"/><published>2024-09-28T15:12:00+00:00</published><updated>2024-09-28T15:12:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/recursion</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/recursion/"><![CDATA[<h3 id="recursion-the-most-controversial-algorithm-in-computing--why">Recursion: The Most Controversial Algorithm in Computing – Why?</h3> <p>The concept of recursion is straightforward: a function that calls itself. But why is it so controversial? In the world of computing, you typically have two options: you either love recursion or hate it.</p> <p>To explore this further, let’s establish two key rules:</p> <h4 id="rule-1">Rule #1</h4> <p>A recursion must always call itself; otherwise, it isn’t recursion.</p> <h4 id="rule-2">Rule #2</h4> <p>A recursive function requires a base case to prevent it from running infinitely. Beyond this, additional logic can be applied.</p> <hr/> <p>Imagine you’re searching your grandmother’s basement and stumble upon a mysterious locked suitcase. She tells you the key is likely inside a box. However, this box contains other smaller boxes, and so on. The key is inside one of these boxes, and your task is to search for it.</p> <p>This process can be summarized as a recursive function:</p> <ol> <li>Look inside a box.</li> <li>If you find the key, you’re done.</li> <li>If you find another box, look inside that box.</li> </ol> <p>Here’s how this would look in Python code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">search_for_key</span><span class="p">(</span><span class="n">box</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">box</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="nf">is_a_box</span><span class="p">():</span>
            <span class="nf">search_for_key</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">item</span><span class="p">.</span><span class="nf">is_a_key</span><span class="p">():</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Found the key!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <ul> <li><strong>Base Case:</strong> The item found is a key, so there’s no need to search further.</li> <li><strong>Recursion:</strong> If the item found is another box, search inside the new box for the key.</li> </ul> <hr/> <h3 id="the-stack-in-recursion">The Stack in Recursion</h3> <p>Understanding recursion requires a good grasp of stacks, a simple data structure with strict rules. In a stack, you can only insert an item at the top, and you can only remove the topmost item.</p> <p>Imagine a stack with items being added sequentially, starting from item 1 up to item 5. If you want to remove item 3, you must first remove item 5, then item 4, to finally access item 3.</p> <table> <thead> <tr> <th>STACK</th> <th> </th> </tr> </thead> <tbody> <tr> <td>0</td> <td>Item 5</td> </tr> <tr> <td>1</td> <td>Item 4</td> </tr> <tr> <td>2</td> <td>Item 3</td> </tr> <tr> <td>3</td> <td>Item 2</td> </tr> <tr> <td>4</td> <td>Item 1</td> </tr> </tbody> </table> <p>A stack operates on a <strong>First-In, Last-Out (FILO)</strong> principle: the first item in is the last item out.</p> <p>This concept aligns with recursion because, in terms of code execution, computers use a <strong>call stack</strong> to manage function calls. Every time a function is invoked, it is pushed onto the stack, and it’s only removed once the function finishes execution.</p> <hr/> <h3 id="factorial-example-recursive-call-stack">Factorial Example: Recursive Call Stack</h3> <p>Let’s say we want to calculate the factorial of a number using recursion:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <p>Now, calling <code class="language-plaintext highlighter-rouge">factorial(3)</code> works as follows:</p> <h4 id="first-call">First Call:</h4> <p>| FACTORIAL | | |———–|—–| | x | 3 |</p> <p>This function then calls <code class="language-plaintext highlighter-rouge">factorial(2)</code>.</p> <h4 id="second-call">Second Call:</h4> <p>| FACTORIAL | | |———–|—–| | x | 2 | | x | 3 |</p> <p>Next, it calls <code class="language-plaintext highlighter-rouge">factorial(1)</code>.</p> <h4 id="third-call">Third Call:</h4> <p>| FACTORIAL | | |———–|—–| | x | 1 | | x | 2 | | x | 3 |</p> <p>At this point, the base case is reached (<code class="language-plaintext highlighter-rouge">x == 1</code>), so the recursion stops, and the functions begin resolving in reverse order:</p> <ol> <li>Return <code class="language-plaintext highlighter-rouge">1</code> (from <code class="language-plaintext highlighter-rouge">factorial(1)</code>).</li> <li>Calculate <code class="language-plaintext highlighter-rouge">2 * factorial(1) = 2</code>.</li> <li>Calculate <code class="language-plaintext highlighter-rouge">3 * factorial(2) = 6</code>.</li> </ol> <p>The final result is <code class="language-plaintext highlighter-rouge">6</code>.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="math"/><category term="code"/><summary type="html"><![CDATA[Understanding What is Recursion]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://daniel-p-lima.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/tabs</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="d2321fea-d86e-4017-a220-897d2182f84f" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="d2321fea-d86e-4017-a220-897d2182f84f" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="c80e2607-6cc9-4e14-8b62-8d35bb4220a2" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="c80e2607-6cc9-4e14-8b62-8d35bb4220a2" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="e1a58dca-3825-4516-abd2-dba53eaf316e" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="e1a58dca-3825-4516-abd2-dba53eaf316e" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://daniel-p-lima.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/typograms</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://daniel-p-lima.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://daniel-p-lima.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://daniel-p-lima.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://daniel-p-lima.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://daniel-p-lima.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://daniel-p-lima.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry></feed>